(unless (find-package :KM)
  (make-package :KNOWLEDGE-MANAGER
        :nicknames '(:KM)
        :use '(:common-lisp)))

(in-package :km)

(defvar *fuf-output* nil)
(defun fuf ()
  (load (concatenate 'string cl-user::*fuf-directory* "fug5.lisp")))

(defun surge ()
  (load (concatenate 'string cl-user::*fuf-directory* "gr.lisp")))

(defun speak (vp)
  (format t "~A~%" (write-fd (caar (2fd vp)))))

(defun write-vp (vp)
  (format t "~A~%" (write-fd (caar (2fd vp)))))

(defun print-vp (vp)
  (format t "~A~%" (pprint (caar (2fd vp)))))

(defun cprint-fd (fd) (cformat (write-fd fd)))

(defun write-fd (fd) (uni-string fd :non-interactive t))

(defun dolist-write-fd (vplst)
  (dolist (x vplst)
          (format t "~A:  ~S~%" (first x) (eval (second x)))
          (format t "                 ~S~%" (write-fd (caar (2fd (first x)))))))

(defun try-fd (fd) (uni-fd fd))

(setf *fd* '((cat clause)
             (proc ((type ascriptive)))
             (partic ((carrier ((cat common) (lex "bear")))
                      (attribute ((cat ap) (lex "big")))))))

(defun compile-surge ()
  "Compile all files required by system fug5"
  (proclaim '(optimize (compilation-speed 0) (speed 3) (safety 1)))
  (load (concatenate 'string cl-user::*fuf-directory* "macros.lisp"))
  (compile-file (concatenate 'string *surge23-directory* "adverbial.l"))
  (compile-file (concatenate 'string *surge23-directory* "clause.l"))
  (compile-file (concatenate 'string *surge23-directory* "complex.l"))
  (compile-file (concatenate 'string *surge23-directory* "determiner.l"))
  (compile-file (concatenate 'string *surge23-directory* "gr-modular.l"))
  (compile-file (concatenate 'string *surge23-directory* "mood.l"))
  (compile-file (concatenate 'string *surge23-directory* "np.l"))
  (compile-file (concatenate 'string *surge23-directory* "special.l"))
  (compile-file (concatenate 'string *surge23-directory* "tpat.l"))
  (compile-file (concatenate 'string *surge23-directory* "transitivity.l"))
  (compile-file (concatenate 'string *surge23-directory* "types.l"))
  (compile-file (concatenate 'string *surge23-directory* "verb-group.l"))
  (compile-file (concatenate 'string *surge23-directory* "voice.l")))

(defun nlg-test ()
    (load (concatenate 'string cl-user::*fuf-directory* "string-match"))
    (load (concatenate 'string cl-user::*fuf-directory* "debughelp"))
    (load (concatenate 'string cl-user::*fuf-directory* "find-pdt"))
    (load (concatenate 'string cl-user::*fuf-directory* "FDaccess")))

(defun load-basic ()
    (load (concatenate 'string cl-user::*fuf-directory* "MakeNP-paths"))
    (load (concatenate 'string cl-user::*fuf-directory* "paths"))
    (load (concatenate 'string cl-user::*fuf-directory* "MakeClause"))
    (load (concatenate 'string cl-user::*fuf-directory* "pdt"))
    (load (concatenate 'string cl-user::*fuf-directory* "filter-slots"))
    (load (concatenate 'string cl-user::*fuf-directory* "fd"))
    (load (concatenate 'string cl-user::*fuf-directory* "irregulars.lisp")))

(defun load-23 ()
    (load (concatenate 'string cl-user::*surge23-directory* "adverbial"))
    (load (concatenate 'string cl-user::*surge23-directory* "clause"))
    (load (concatenate 'string cl-user::*surge23-directory* "complex"))
    (load (concatenate 'string cl-user::*surge23-directory* "determiner"))
    (load (concatenate 'string cl-user::*fuf-directory* "gr-modular2.lisp"))
    (load (concatenate 'string cl-user::*fuf-directory* "lexicon"))
    (load (concatenate 'string cl-user::*fuf-directory* "irregulars"))
    (load (concatenate 'string cl-user::*surge23-directory* "linearize2"))
    (load (concatenate 'string cl-user::*surge23-directory* "mood"))
    (load (concatenate 'string cl-user::*surge23-directory* "nba"))
    (load (concatenate 'string cl-user::*surge23-directory* "np"))
    (load (concatenate 'string cl-user::*surge23-directory* "special"))
    (load (concatenate 'string cl-user::*surge23-directory* "tpat"))
    (load (concatenate 'string cl-user::*surge23-directory* "transitivity"))
    (load (concatenate 'string cl-user::*surge23-directory* "types"))
    (load (concatenate 'string cl-user::*surge23-directory* "verb-group"))
    (load (concatenate 'string cl-user::*surge23-directory* "voice"))
    (load (concatenate 'string cl-user::*root-dir* "discourse.lisp")))

(defun load-english () (load-23))

(defun load-spanish ()
    (load "C:/Research/Lispworks/spanish1.0/adverbial.lisp")
    (load "C:/Research/Lispworks/spanish1.0/clause.lisp")
    (load "C:/Research/Lispworks/spanish1.0/complex.lisp")
    (load "C:/Research/Lispworks/spanish1.0/determiner.lisp")
    (load "C:/Research/Lispworks/spanish1.0/gr-modular.lisp")
    (load "C:/Research/Lispworks/spanish1.0/lexicon-new.lisp")
    (load "C:/Research/Lispworks/spanish1.0/linearize2.lisp")
    (load "C:/Research/Lispworks/spanish1.0/mood.lisp")
    (load "C:/Research/Lispworks/spanish1.0/nba.lisp")
    (load "C:/Research/Lispworks/spanish1.0/np.lisp")
    (load "C:/Research/Lispworks/spanish1.0/special.lisp")
    (load "C:/Research/Lispworks/spanish1.0/tpat.lisp")
    (load "C:/Research/Lispworks/spanish1.0/transitivity.lisp")
    (load "C:/Research/Lispworks/spanish1.0/types.lisp")
    (load "C:/Research/Lispworks/spanish1.0/verb-group.lisp")
    (load "C:/Research/Lispworks/spanish1.0/voice.lisp"))

(defun load-italian ()
    (load "C:/Research/Lispworks/revisor/revise-museum-it.lisp")
    (load "C:/Research/Lispworks/italian1.0/gr-modular.lisp")
    (load "C:/Research/Lispworks/italian1.0/tpat.lisp")
    (load "C:/Research/Lispworks/italian1.0/types.lisp")
    (load "C:/Research/Lispworks/italian1.0/transitivity.lisp")
    (load "C:/Research/Lispworks/italian1.0/verb-group.lisp")
    (load "C:/Research/Lispworks/italian1.0/adverbial.lisp")
    (load "C:/Research/Lispworks/italian1.0/clause.lisp")
    (load "C:/Research/Lispworks/italian1.0/complex.lisp")
    (load "C:/Research/Lispworks/italian1.0/determiner.lisp")
    (load "C:/Research/Lispworks/italian1.0/mood.lisp")
    (load "C:/Research/Lispworks/italian1.0/np.lisp")
    (load "C:/Research/Lispworks/italian1.0/special.lisp")
    (load "C:/Research/Lispworks/italian1.0/voice.lisp")
    (load "C:/Research/Lispworks/italian1.0/lexicon")
    (load "C:/Research/Lispworks/italian1.0/linearize2")
    (load "C:/Research/Lispworks/italian1.0/irregolari.lisp")
    (load "C:/Research/Lispworks/discourse-it.lisp"))

(defun load-monotonic ()
    (load (concatenate 'string cl-user::*fuf-directory* "graph"))
    (cond ((equal *current-language* 'italian) (load "italian1.0/gr-modular.lisp") (load "discourse-it.lisp"))
          ((equal *current-language* 'spanish) (load "spanish1.0/gr-modular.lisp"))
          (t  (load "fuf/gr-modular2.lisp") (load "discourse.lisp"))))

(defun load-nonmonotonic ()
    (load (concatenate 'string *revisor-directory* "graph2"))
    (if (functionp 'reviser)
        (reviser)
        (progn (load (concatenate 'string *revisor-directory* "revise-narr.lisp")) (reviser))))

(defun load-shorten ()
    (load (concatenate 'string cl-user::*fuf-directory* "shorten")))

(defun compile-nlg ()
    (compile-file (concatenate 'string cl-user::*fuf-directory* "string-match.lisp"))
    (compile-file (concatenate 'string cl-user::*fuf-directory* "MakeNP.lisp"))
    (compile-file (concatenate 'string cl-user::*fuf-directory* "MakeNP-paths.lisp"))
    (compile-file (concatenate 'string cl-user::*fuf-directory* "pdt.lisp"))
    (compile-file (concatenate 'string cl-user::*fuf-directory* "filter-slots.lisp"))
    (compile-file (concatenate 'string cl-user::*fuf-directory* "paths.lisp"))
    (compile-file (concatenate 'string cl-user::*fuf-directory* "MakeClause.lisp"))
    (compile-file (concatenate 'string cl-user::*fuf-directory* "fd.lisp")))

(in-package :km)
(fuf)
(in-package :km)
(surge)
(in-package :km)
;(load-basic)
;(nlg-test)
